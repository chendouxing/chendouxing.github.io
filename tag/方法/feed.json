{
    "version": "https://jsonfeed.org/version/1",
    "title": "蟹堡王海星 • All posts by \"方法\" tag",
    "description": "花有重开日，人无再少年",
    "home_page_url": "https://chendouxing.github.io",
    "items": [
        {
            "id": "https://chendouxing.github.io/2023/08/31/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/",
            "url": "https://chendouxing.github.io/2023/08/31/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/",
            "title": "分布式具体方法",
            "date_published": "2023-08-31T12:07:15.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"分布式查询\"><a class=\"markdownIt-Anchor\" href=\"#分布式查询\">#</a> 分布式查询</h1>\n<h2 id=\"单查询并行处理\"><a class=\"markdownIt-Anchor\" href=\"#单查询并行处理\">#</a> 单查询并行处理</h2>\n<p><strong>数据并行</strong>：从数据并行性的角度出发，查询算子的输入数据可以看作是由若干个独立的数据块所组成，因而查询算子可以被拆分成多个子任务来并行处理输入数据中的不同数据块，从而加速整个算子的处理流程。然而，面对不同场景下的输入数据，算子的并行处理方式也会存在一些差异。</p>\n<p><img src=\"/images/image-20231114133850598.png\" alt=\"image-20231114133850598\"></p>\n<ul>\n<li><strong>分布式存储中的数据</strong>：在分布式架构下，数据表会被划分成为多个数据分片存储在不同节点中。因此，一个扫描算子（Scan）可以利用分片间的数据并行性被划分成为多个扫描子任务来并行访问多个节点上的数据分片，从而加速查询的数据加载过程（例如，Oracle RAC [20] 和 Cedar [21] 中基于数据分片并行扫描机制）。此外，针对单个分片的扫描子任务还可以进一步利用分片内的数据并行性来生成更细粒度的扫描子任务，从而获得更高的扫描并行度。例如，图 1.2 中针对 R 表的扫描算子就可以生成六个扫描子任务来分别扫描两个数据分片。</li>\n</ul>\n<p><img src=\"/images/image-20231114134237225.png\" alt=\"image-20231114134237225\"></p>\n<ul>\n<li><strong>非共享内存中的数据</strong>：当面对内存中的输入数据时，查询算子会被拆分成多个子任务，从而并行地运行在不同节点的多个处理器上来处理输入数据中的不同数据块。然而，考虑到非共享内存架构（即，无共享和共享存储架构）下节点间的内存资源相互独立，<strong>每个算子子任务的输入数据块还需交由数据交换算子</strong>（例如，Shark [22] 中的 Shuffle 算子和 GPDB [23] 中的 Motion 算子，其包含传输 操作和接收操作）<strong>重分发（Redistribute）到对应的节点上</strong>，从而避免算子子任务的并行处理过程中存在跨节点的内存数据访问。例如，图 1.2 中扫描 R 表所得的数据需由多个传输操作<strong>按照特定的规则重分发</strong>给不同节点上的子任务。</li>\n<li><strong>共享内存中的数据</strong>：当输入数据位于分布式共享内存中时，查询算子也会被划分成为多个算子子任务，分布在不同节点上来处理输入数据中的不同数据块。 然而，<strong>在分布式共享内存架构下，算子的输入数据不必按照特定的划分规则（例如，范围或哈希）重分布到不同节点上。每个节点上的算子子任务可以借助于跨节点的内存访问从对应节点的内存中直接读取所需的输入数据块</strong>。例如，基于分布式共享内存架构的 Radish [34] 系统和 H 2TAP [25] 系统就不需依赖任何数 据重分布操作便可将查询中的算子并行运行在不同节点上。</li>\n</ul>\n",
            "tags": [
                "分布式",
                "方法"
            ]
        }
    ]
}