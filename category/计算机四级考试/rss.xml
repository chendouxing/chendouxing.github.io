<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>蟹堡王海星 • Posts by &#34;计算机四级考试&#34; category</title>
        <link>https://chendouxing.github.io</link>
        <description>花有重开日，人无再少年</description>
        <language>zh-CN</language>
        <pubDate>Thu, 24 Aug 2023 14:39:06 +0800</pubDate>
        <lastBuildDate>Thu, 24 Aug 2023 14:39:06 +0800</lastBuildDate>
        <category>计算机等级考试</category>
        <category>数学</category>
        <category>课堂学习</category>
        <category>语言</category>
        <category>SQL</category>
        <category>论文</category>
        <item>
            <guid isPermalink="true">https://chendouxing.github.io/2023/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7%E8%80%83%E8%AF%95/</guid>
            <title>计算机四级考试</title>
            <link>https://chendouxing.github.io/2023/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7%E8%80%83%E8%AF%95/</link>
            <category>计算机等级考试</category>
            <pubDate>Thu, 24 Aug 2023 14:39:06 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;数据库原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库原理&#34;&gt;#&lt;/a&gt; 数据库原理&lt;/h1&gt;
&lt;p&gt;分布式透明性（网络透明性）包含位置透明性和命名透明性；复制透明性使用户不知道副本的存在&lt;/p&gt;
&lt;p&gt;两阶段封锁协议保证可串行性&lt;/p&gt;
&lt;p&gt;保证事务原子性是 DBMS 的事务管理器中故障恢复机制的责任；保证事务的一致性是对该事务进行编码的应用程序员的责任；保证事务的隔离性是 DBMS 的事务管理器中并发控制部件的责任；保证事务的持久性是 DBMS 的事务管理器中故障恢复机制的责任。&lt;/p&gt;
&lt;p&gt;在分布式提交中，当一个事务更新在多个站点上的数据时，直到它确认每个站点上的事务都有结果且没有丢失时才能够提交。每个站点首先将事务执行的局部结果&lt;strong&gt;永久&lt;/strong&gt;记录在本地站点磁盘的日志上。&lt;/p&gt;
&lt;p&gt;分布式系统的所有问题是&lt;strong&gt;内部的、实现级别的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分布式数据库系统中的&lt;strong&gt;数据分片&lt;/strong&gt;是指&lt;strong&gt;对全局关系的分片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可重构性：必须保证能够由一个全局关系的各个片段来重构该全局关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 协议的效率低&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分布式计算系统不可能同时满足 CAP 原理（一致性，可用性和分区容忍性）&lt;/p&gt;
&lt;p&gt;ODMG 中对象可以用五个方面来描述：标识符、名称、生存期、结构和创建&lt;/p&gt;
&lt;p&gt;对象定义语言 ODL&lt;strong&gt; 独立于&lt;/strong&gt;任何特定的编程语言（“ODL 是与 C++ 或 JAVA 等类似的一种编程语言” 该说法是错误的&lt;/p&gt;
&lt;p&gt;基本可用是指分布式系统在出现不可预知的故障时，允许损失部分可用性，但不等价于可用性不可用&lt;/p&gt;
&lt;p&gt;在主站点技术中，所有的识别副本&lt;strong&gt;都被保留&lt;/strong&gt;在相同的站点上；所有的加锁和解锁请求&lt;strong&gt;都被传输&lt;/strong&gt;在包含那个副本的站点上。&lt;/p&gt;
&lt;p&gt;分布式数据库系统的查询处理比集中式系统&lt;strong&gt;更复杂&lt;/strong&gt;，分布式数据查询&lt;strong&gt;以减少传输的数据量为优化目标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半连接操作不能交换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于识别数据项副本的方法常用于&lt;strong&gt;分布式并发控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NOSQL 的复制模型主要有主 - 从复制和主 - 主复制。主从复制模型需要一 个复制为主复制，&lt;strong&gt;所有的读和写操作都必须是对主复制的&lt;/strong&gt;，然后再复制到其他的从节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个典型的对象 - 关系数据库中的表不满足第一范式的要求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;三层 B/S 体系结构分别为表示层、应用层和数据库服务器层。应用层也称为业务逻辑层。&lt;strong&gt;当使用 Web 界面时，表示层一般通过 HTTP 协议 与应用层进行通信&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;典型的大对象（&lt;strong&gt;位图图像和长文本串&lt;/strong&gt;）&lt;strong&gt;被称为二级制大对象 BLOB&lt;/strong&gt;，一般是非结构化的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双钥加密体制中的加密秘钥和解密秘钥是不相同的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DBMS 不能直接处理基于非结构复杂对象的值的选择条件及其他操作。&lt;/p&gt;
&lt;p&gt;很多 NOSQL 系统不支持 Join（连接）操作，Join 操作需要在应用程序中实现。&lt;/p&gt;
&lt;p&gt;基于关系数据库系统的、以数据处理为主的传统的数据库应用具有以下共同特点：结构统一，面向记录，数据项小和原子字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三种最基本的构造器是：原子、结构或元组、以及汇集。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据加密标准&lt;strong&gt; DES&lt;/strong&gt; 的密钥长度是&lt;strong&gt; 56&lt;/strong&gt; 位数字，数据高级加密标准&lt;strong&gt; AES&lt;/strong&gt; 的密钥长度可以是&lt;strong&gt; 128、192 或 256&lt;/strong&gt; 位数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BASE 指的是基本可用、软状态和最终一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多 NOSQL 系统采用的是&lt;strong&gt;对对象的主码进行哈希或范围分区方法来提高访问数据的性能&lt;/strong&gt;，NoSQL&lt;strong&gt; 支持无模式结构数据的存储和访问&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;投票方法在站点间产生的信息通信量比识别副本方法产生的要高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以应用服务器为中心的软件结构是 Web 服务器和三层客户机服务器结合的成果。&lt;strong&gt;这种软件结构可分为四部分：客户机浏览器、Web 服务器、应用服务器、数据库服务器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两阶段提交协议常用于处理分布式提交问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;常用的 B /S 结构软件开发模式:&lt;strong&gt; 以 Web 服务器为中心&lt;/strong&gt;，&lt;strong&gt;以数据库服务器为中心&lt;/strong&gt;和&lt;strong&gt;以应用服务器为中心&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;星形性质：安全级别高的主体禁止写安全级别低的客体&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列存储数据库是按列存储数据&lt;/strong&gt;的，这类系统按列将一张表分为列族 (一种&lt;strong&gt;垂直分片方法&lt;/strong&gt;) , 每个列族存储在自己的文件中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在投票方法中，不需要指定识别副本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;主站点技术是一种识别数据项副本的并发控制方法；主站点技术中所有的识别副本都保留在同一站点上，&lt;strong&gt;尽管所有的锁都在主站点上存取，但数据项本身可以在它们所在的任何站点上存取&lt;/strong&gt;，主站点技术的好处是它是集中式方案的简单扩展，因此不太复杂。&lt;/p&gt;
&lt;p&gt;关联规则，指的是同时满足最小支持度阈值和最小可信度阈值的规则。关联规则挖掘的总体性能由从项集中找出频繁项集的过程决定，常用的关联规则挖掘算法有 Aprior 算法、采样算法、分区算法等。&lt;strong&gt;一个频繁项集的超集可以是频繁项集，也可以不是&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大多数的 WEB 产品都是通过牺牲一致性来换取高可用性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强一致性&lt;/strong&gt;：对于关系型数据库，要求更新过的数据都能被后续的访问看到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：如果经过一段时间后，要求能访问到更新后的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;星形模型由一个事实表和每个维对应的维表组成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SCRUD&lt;/strong&gt; 操作分别指&lt;strong&gt; Search&lt;/strong&gt;、Create、Read、Update、Delete。&lt;/p&gt;
&lt;p&gt;对于遵循维格式的数据，在&lt;strong&gt;多维矩阵（数据立方体）上的查询性能优于关系数据模型上的查询性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对象查询语言 **（OQL）在设计时需要与编程语言紧密配合使用 **，&lt;strong&gt;OQL 语法与 SQL 的语法相似&lt;/strong&gt;，只是增加了有关 ODMG 概念的特征。&lt;/p&gt;
&lt;p&gt;如果某个账户&lt;strong&gt;没有 CREATE TABLE 权限&lt;/strong&gt;，那么这个账户就&lt;strong&gt;不能创建任何关系&lt;/strong&gt;；矩阵中的每个位置&lt;strong&gt; M (i，j) 表示主体 i 有对象 j 的权限类型&lt;/strong&gt; (读、写和更新)。&lt;/p&gt;
&lt;p&gt;在面向对象的程序设计语言中的对象称为&lt;strong&gt;临时对象&lt;/strong&gt;，面向对象数据库永远在二级存储器中存储持久的对象。&lt;/p&gt;
&lt;p&gt;对象数据库 (ODB) 设计与关系数据库 (RDB) 设计之间最主要的区别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何处理联系；&lt;/li&gt;
&lt;li&gt;如何处理继承；&lt;/li&gt;
&lt;li&gt;在对象数据库设计中，有必要在设计时尽早指定操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数字签名由一个符号串组成，&lt;strong&gt;签名对每个应用来说必须是不同的&lt;/strong&gt;；&lt;strong&gt;公钥技术&lt;/strong&gt;是创建此类特性的数字签名的&lt;strong&gt;最好办法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在多重继承的一般性规则中，只有&lt;strong&gt;当两个超类型中的同名函数不相同时才会发生二义性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个对象标识符&lt;strong&gt; OID 只能被使用一次&lt;/strong&gt;，OID 在对象生成时产生，&lt;strong&gt;在撤销对象时被注销&lt;/strong&gt;，无法再赋予另外的对象。&lt;/p&gt;
&lt;p&gt;公钥加密模式 (或者公钥构架) 的组成部分：明文、加密算法、公钥、私钥、密文和解密算法。&lt;/p&gt;
&lt;p&gt;OLAP 服务器是位于客户与数据仓库服务器之间的一个服务器。关系 OLAP 服务器是 OLAP 服务器的一种实现，是扩充的关系型 DBMS，提供对多维数据库的支持。多维 OLAP 服务器是 OLAP 服务器的一种实现，它是一种特殊的服务器，直接支持多维数据的存储和操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOSQL 系统常常使用水平扩展&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在多维模式中，&lt;strong&gt;雪花模式比星形模式的数据冗余要低&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;数据库安全性的一般控制措施包括：&lt;strong&gt;访问控制&lt;/strong&gt;、&lt;strong&gt;推理控制&lt;/strong&gt;、&lt;strong&gt;流控制&lt;/strong&gt;、&lt;strong&gt;数据加密&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOSQL 数据库&lt;/strong&gt;把文件的&lt;strong&gt;记录共享在多个节点&lt;/strong&gt;上，以分担对数据的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自主安全性机制的任务&lt;/strong&gt;包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限授予（GRANT）&lt;/li&gt;
&lt;li&gt;权限收回（REVOKE）&lt;/li&gt;
&lt;li&gt;传播权限（GRANT OPTION）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强制安全性机制用于对多级安全性进行控制，将用户和数据分为多个安全类别；&lt;strong&gt;基于角色的安全性机制是强制安全性机制的一个扩展&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一般把 NOSQL 所采用的模型分为四类：键值、文档、列和图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公钥加密使用两个独立的密钥&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CGI&lt;/strong&gt; 作为一个独立的进程在 Web 服务器上运行，&lt;strong&gt;进程的创建和关闭都会严重消耗系统资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;API 与 CGI 两种编程接口均存在缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户界面受 HTML 语言的限制；&lt;/li&gt;
&lt;li&gt;Web 服务器负载过重；&lt;/li&gt;
&lt;li&gt;HTTP 协议的效率低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;行和数组类型构造器用于指定复杂类型，称为用户自定义类型&lt;/strong&gt;；行类型对应于元组 (或结构) 构造器；数组类型对应指定汇集（集合）； SQL 提供了类似于类定义的构造，用户可以通过该构造创建命名的用户自定义类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计数据库安全技术禁止对个体数据进行检索&lt;/strong&gt;，只允许使用聚集类型的函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个大项集 (频繁项集) 的子集必须是大项集&lt;/strong&gt;，&lt;strong&gt;一个小项集&lt;/strong&gt; (&lt;strong&gt;非频繁项集&lt;/strong&gt;)&lt;strong&gt; 的超集是小项集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在关系授权和收回权限的&lt;strong&gt;自主访问控制技术，是一种 &amp;quot;all-or-nothing&amp;quot; 的方法&lt;/strong&gt;，即一个用户要么拥有该特权，要么没有该特权。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;水平扩展&lt;/strong&gt;：增加分布式系统的节点数量；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;垂直扩展&lt;/strong&gt;：对系统的单个节点的能力进行扩充，比如增加存储能力和处理能力。&lt;/p&gt;
&lt;h2 id=&#34;多选题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多选题&#34;&gt;#&lt;/a&gt; 多选题&lt;/h2&gt;
&lt;p&gt;DBMS 提供模式数据定义语言（DDL）&lt;strong&gt;来描述逻辑模式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;常用的&lt;strong&gt;逻辑数据模型&lt;/strong&gt;包括基于记录的模型（&lt;strong&gt;层次模型、网状模型、关系模型&lt;/strong&gt;）、&lt;strong&gt;面向对象模型和对象关系模型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;概念数据模型&lt;/strong&gt;包括实体联系模型（E-R 模型）、扩充的实体联系模型（EER 模型）、&lt;strong&gt;面向对象模型&lt;/strong&gt;、&lt;strong&gt;谓词模型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象模型可以是概念模型，也可以是逻辑模型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DBMS 还提供以下各方面数据控制功能：支持数据的多视图；支持数据共享和多用户事务处理；具有可控的冗余，&lt;strong&gt;提供数据库数据的安全性保护&lt;/strong&gt;，限制非授权的访问；为程序对象提供持久性存储；提供高效查询处理的存储结构，&lt;strong&gt;支持高效的数据查询处理与优化&lt;/strong&gt;；&lt;strong&gt;提供数据库的备份和恢复功能&lt;/strong&gt;；&lt;strong&gt; 提供定义和确保数据库完整性检查&lt;/strong&gt;；提供多用户界面；可缩短程序开发时间；&lt;strong&gt;并发控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库管理员的职责包括&lt;/strong&gt;：&lt;strong&gt;确定数据库中的信息内容和结构&lt;/strong&gt;；&lt;strong&gt;确定数据库的存储结构和存取策略&lt;/strong&gt;；&lt;strong&gt; 定义数据的安全性要求和完整性约束&lt;/strong&gt;；监控数据库的使用和运行；数据库的性能改进；定期对数据库进行重组或重构，以提高系统的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关系模型是数学化模型&lt;/strong&gt;，&lt;strong&gt;关系模型中数据的逻辑结构是一张二维表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;模式是数据库中全体数据的逻辑结构和特征描述，仅涉及 “型”，不涉及 “值”；一个模式可以有多个实例。只指定数据库的模式，此时数据库的状态称为没有数据的空状态。数据库第一次装入或加载初始数据后的状态，称为初始状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个数据库只有一个模式&lt;/strong&gt;，&lt;strong&gt;与具体的数据模型有关&lt;/strong&gt;，但与具体应用程序以及所使用的应用开发工具和高级程序设计语言等无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同一个外模式可以被某一用户的多个应用程序所使用，但一个应用程序只能使用一个外模式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三级抽象模式是数据字典的最基本的内容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据的逻辑独立性保证数据的逻辑结构改变时，应用程序不用改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;层次模型&lt;/strong&gt;以&lt;strong&gt;树状结构&lt;/strong&gt;表示各类实体以及他们之间的联系；&lt;strong&gt;网状模型&lt;/strong&gt;以&lt;strong&gt;指针&lt;/strong&gt;表示记录之间的联系；&lt;strong&gt;关系模型&lt;/strong&gt;以&lt;strong&gt;二维表&lt;/strong&gt;的形式表示实体与实体之间的联系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;层次模型只能直接表示 1:1 关系和 1：n 关系，多对多（m:n）关系无法直接表示，因为层次结构以树状结构来表示关系，每个节点（除根节点无双亲节点）均只有一个双亲节点，一个或多个子节点，故无法直接表示多对多关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与传统文件系统相比，&lt;strong&gt;数据库系统的优点是&lt;/strong&gt;：&lt;strong&gt;数据冗余度小、数据整体有结构、数据共享性高、数据独立性高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关系操作的方式为一次一个集合&lt;/strong&gt;，&lt;strong&gt;非关系操作的方式为一次一个记录&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据完整性包括实体完整性&lt;/strong&gt;、&lt;strong&gt;参照完整性和用户定义完整性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为维护数据完整性，在将新元组 t 插入到关系 R 时，需要进行完整性检查，&lt;strong&gt;若关系&lt;/strong&gt; R&lt;strong&gt; 是参照关系&lt;/strong&gt;，&lt;strong&gt;则需要对被参照关系进行检查&lt;/strong&gt;，&lt;strong&gt;看是否会违反参照完整性约束&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;操作系统原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统原理&#34;&gt;#&lt;/a&gt; 操作系统原理&lt;/h1&gt;
 ]]></description>
        </item>
    </channel>
</rss>
